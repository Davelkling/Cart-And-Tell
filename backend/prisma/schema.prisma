// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// User can be Normal-user or Merchant-user
model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  cart ProductItem[]
  isMerchant Boolean @default(false)
  merchant Merchant?
  messages Message[]
}
model Category {
  id Int @id @default(autoincrement())
  name String @unique
  icon String? 
  merchant Merchant[]
}
// model Brand {
//   id Int @id @default(autoincrement())
//   name String @unique
//   icon String? 
//   merchant Merchant[]
// }
model Merchant {
  id Int @id @default(autoincrement())
  name String @unique
  website String @unique
  description String
  // email String @unique   //Might move it to User model later, Note: I did
  category Category? @relation(fields: [categoryId],references: [id])
  categoryId Int
  // brand Brand? @relation(fields: [brandId],references: [id])
  // brandId Int?
  proofOfAuthenticity String
  merchantRelationship MerchantRelation @default(MerchantOwner)
  merchantStartValidity DateTime
  merchantEndValidity DateTime
  image String
  products Product[]
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  livestream LiveStream?
}
enum MerchantRelation {
  MerchantOwner
  ExclusiveDistributor
  NonExclusiveDistributor
}
model Product {
  id Int @id @default(autoincrement())
  name String
  amount Float
  description String
  image String?
  rating Int @default(0)
  productItemId ProductItem[]
  merchant Merchant @relation(fields: [merchantId], references: [id])
  merchantId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  livestream LiveStream?
}

model ProductItem {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId],references: [id])
  userId Int
  quantity Int
  product Product @relation(fields: [productId],references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Message {
  id Int @id @default(autoincrement())
  text String
  user User @relation(fields: [userId],references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  livestream LiveStream @relation(fields: [liveStreamRoomId], references: [roomId])
  liveStreamRoomId String
}
model LiveStream {
  roomId String @id @default(uuid())
  merchant Merchant @relation(fields: [merchantId], references: [id])
  merchantId Int @unique
  product Product? @relation(fields: [productId],references: [id])
  productId Int? @unique
  Messages Message[] 
}
